Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    1a: com.udacity.webcrawler.SequentialWebCrawler#crawl took 0m 2s 580ms
        com.udacity.webcrawler.parser.PageParserImpl#parse took 0m 2s 574ms
        {"wordCounts":{"udacity":60,"learning":57,"machine":42,"with":40,"data":37},"urlsVisited":4}%

    1b: com.udacity.webcrawler.ParallelWebCrawler#crawl took 0m 2s 457ms
        com.udacity.webcrawler.parser.PageParserImpl#parse took 0m 9s 801ms
        {"wordCounts":{"data":828,"learning":506,"udacity":504,"program":469,"with":458},"urlsVisited":31}%

       ParallelWebCrawler visited more pages and got more data and it sums the total page parser time.



Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

        Maybe the old computer does not have multiple core processors to support the parallel crawler. Thus making the parellel crawlling
        slower because of thread managing.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        A multi-core processor will use parallel crawling to the max, as long as it has the computing resources available to it.

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    It's a utility that wraps an object that should be performance profiled. Performance profiling.

    (b) What are the join points of the Profiler in the web crawler program?

    Join points are places where advice can plug into your code, usually via method interceptors, where @Profiled are used.

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    1. Dependency injection - ProfilerImpl - use DI framework to create objects instead of creating the object manually everytime.

    2. Builder - CrawlResult - method chaining to create object - may get complicated when creating the builder class

    3. Proxy pattern - ProfilerImpl - do not need to know the interface being implemented - code gets harder to understand


